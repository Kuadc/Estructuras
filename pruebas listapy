
from Nodo import Nodo
import numpy as np
from Nodo import Nodo
import numpy as np

class Lista:
	__pr:int
	__ult:int
	__cant:int
	__arre:np.array

	def __init__(self, cant):
		self.__cant = cant
		self.__ul = -1
		self.__pr = 0
		self.__arre = np.zeros(cant, dtype=int)


	def insertar(self, x):
		if self.vacia():
			self.__ul+=1
			self.__arre[self.__ul]=x
		else:
			pos = self.buscar(x)
			if 0<=pos<=self.__ul+1:
				i = self.__ul+1
				while i>pos:
					self.__arre[i] = self.__arre[i-1]
					i-=1
				self.__arre[pos]=x
				self.__ul+=1
			else:
				print("fuera de rango")

	def buscar(self, x):
		min =0
		max = self.__ul
		pos=0
		while min <=max:
			medio = (min+max)//2
			if x >self.__arre[medio]:
				pos=medio+1
				medio = min+1
			elif x< self.__arre[medio]:
				max=medio-1
			else:
				pos=medio
				min=max+1
		return pos
	
	def surprimir(self, x):
		if self.vacia():
			print("lista vacia")
		else:
			pos = self.buscar(x)
			if 0<= pos <=self.__ul:
				x = self.__arre[pos]
				while pos < self.__ul:
					self.__arre[pos] = self.__arre[pos+1]
					pos+=1
				self.__ul-=1
				return x
			else:
				print("Elemento no encontrado")
		
	
	
	def vacia(self):
		return self.__ul == -1

			
	def mostrar(self):
		i=self.__pr
		while i<self.__ul+1:
			print(f"{self.__arre[i]}")
			i+=1

	def mostrar2(self):
		aux = self.__pr
		while aux != None:
			print(f"{aux.getDato()}")
			aux = aux.getSig()

if __name__ == "__main__":

    pi = Lista(6)
    pi.insertar(10)
    pi.insertar(20) 
    pi.insertar(30)
    pi.insertar(25)
    pi.insertar(24)
    pi.insertar(5)
    pi.mostrar()
    print("listo")
    #pi.suprimir(90)
    pi.mostrar()
  